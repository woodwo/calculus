// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/woodwo/calculus/grpc/proto (interfaces: CalculusClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/woodwo/calculus/grpc/proto"
	grpc "google.golang.org/grpc"
)

// MockCalculusClient is a mock of CalculusClient interface.
type MockCalculusClient struct {
	ctrl     *gomock.Controller
	recorder *MockCalculusClientMockRecorder
}

// MockCalculusClientMockRecorder is the mock recorder for MockCalculusClient.
type MockCalculusClientMockRecorder struct {
	mock *MockCalculusClient
}

// NewMockCalculusClient creates a new mock instance.
func NewMockCalculusClient(ctrl *gomock.Controller) *MockCalculusClient {
	mock := &MockCalculusClient{ctrl: ctrl}
	mock.recorder = &MockCalculusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculusClient) EXPECT() *MockCalculusClientMockRecorder {
	return m.recorder
}

// Fibonacci mocks base method.
func (m *MockCalculusClient) Fibonacci(arg0 context.Context, arg1 *proto.Empty, arg2 ...grpc.CallOption) (*proto.Value, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fibonacci", varargs...)
	ret0, _ := ret[0].(*proto.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fibonacci indicates an expected call of Fibonacci.
func (mr *MockCalculusClientMockRecorder) Fibonacci(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fibonacci", reflect.TypeOf((*MockCalculusClient)(nil).Fibonacci), varargs...)
}
